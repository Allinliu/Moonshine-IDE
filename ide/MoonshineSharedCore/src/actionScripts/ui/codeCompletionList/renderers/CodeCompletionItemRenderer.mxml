<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:codecompletionlist="actionScripts.ui.codeCompletionList.*"
                addedToStage="onItemAddedToStage(event)" removedFromStage="onItemRemovedFromStage(event)">

    <codecompletionlist:CodeIconIndicator left="2" verticalCenter="0" data="{data}"/>
    <s:Label id="labelDisplay" color="0x101010" verticalCenter="0"
             textAlign="left" showTruncationTip="true" maxDisplayedLines="1" left="25" right="{detailsGroup.width + 7}"
             maxWidth="300"/>
    <s:HGroup id="detailsGroup" right="4" verticalCenter="0" gap="2" visible="false"
              verticalAlign="middle">
        <s:Label color="0x606060" textAlign="right"
                 maxWidth="80" showTruncationTip="true" maxDisplayedLines="1" text="{data.displayKind}"/>
        <codecompletionlist:CodeIconIndicator id="infoIndicator" currentState="info" data="{data}"
                                              click="onCodeIconIndicatorClick(event)" />
    </s:HGroup>
    <fx:Script><![CDATA[
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.ui.codeCompletionList.ToolTipPopupWithTimer;
        import mx.managers.PopUpManager;

        private var signatureToolTip:ToolTipPopupWithTimer;
        private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();

        override protected function set hovered(value:Boolean):void
        {
            if (selected && data)
            {
                this.toolTip = null;
            }
            else if (data)
            {
                this.toolTip = data.detail;
            }

            super.hovered = value;

            if (!selected)
            {
                refreshVisibilityOfDetails(value);
            }
        }

        override public function set selected(value:Boolean):void
        {
            super.selected = value;
            refreshVisibilityOfDetails(value);
            if (signatureToolTip && !selected)
            {
                signatureToolTip.close();
            }
        }

        private function onCodeIconIndicatorClick(event:MouseEvent):void
        {
            dispatcher.dispatchEvent(new Event("showDocumentation"));
        }

        private function refreshVisibilityOfDetails(visible:Boolean):void
        {
            if (detailsGroup)
            {
                detailsGroup.visible = visible;
            }
        }

        private function showSignatureToolTip():void
        {
            if (!signatureToolTip) return;

            if (!selected)
            {
                signatureToolTip.close();
            }

            if (selected && data)
            {
                callLater(refreshSignatureToolTip);
                PopUpManager.addPopUp(signatureToolTip, this);
            }
        }

        private function refreshSignatureToolTip():void
        {
            if (!signatureToolTip) return;

            var toolTipPosition:Point = localToGlobal(new Point(labelDisplay.x, labelDisplay.y + labelDisplay.height));
            signatureToolTip.text = data.detail;
            signatureToolTip.x = toolTipPosition.x + labelDisplay.width;
            signatureToolTip.y = toolTipPosition.y;
        }

        private function onItemAddedToStage(event:Event):void
        {
            if (!signatureToolTip)
            {
                signatureToolTip = new ToolTipPopupWithTimer();
            }
            dispatcher.addEventListener("showDocumentation", onItemShowDocumentation);
        }

        private function onItemRemovedFromStage(event:Event):void
        {
            if (signatureToolTip)
            {
                signatureToolTip.close();
                signatureToolTip = null;
            }

            dispatcher.removeEventListener("showDocumentation", onItemShowDocumentation);
        }

        private function onItemShowDocumentation(event:Event):void
        {
            showSignatureToolTip();
        }
        ]]></fx:Script>
</s:ItemRenderer>
