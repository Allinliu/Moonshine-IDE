<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  implements="actionScripts.ui.IContentWindow" 
		  backgroundColor="0xf5f5f5" width="100%" height="100%"
		  creationComplete="onCreationCompletes()" remove="onTabRemoved(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Tree;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.OpenFileEvent;
			import actionScripts.events.WorkerEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.locator.IDEWorker;
			import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
			import actionScripts.plugin.search.SearchPlugin;
			import actionScripts.ui.renderers.GenericTreeItemRenderer;
			import actionScripts.ui.tabview.TabEvent;
			
			[Bindable] public var valueToSearch:String;
			
			public var patterns:String;
			public var scope:String;
			public var isMatchCase:Boolean;
			public var isRegexp:Boolean;
			
			private var worker:IDEWorker = IDEWorker.getInstance();
			private var model:IDEModel = IDEModel.getInstance();
			private var foundCountsDict:Dictionary = new Dictionary();
			
			/**
			 * IContentWindow Inteface Methods
			 */
			public function get longLabel():String {	return label;	}
			public function isChanged():Boolean	{	return false;	}
			public function isEmpty():Boolean {	return false;	}
			public function save():void {	}
			
			public function resetSearch():void
			{
				txtFoundMessage.includeInLayout = txtFoundMessage.visible = false;
				pbFiles.includeInLayout = pbFiles.visible = true;
				pbFiles.setProgress(0, 0);
				tree.dataProvider = null;
				foundCountsDict = new Dictionary();
				
				this.label = "Search /"+ valueToSearch +"/";
				
				// re-initiate worker 
				worker.sendProjectToSearchString(getSearchObject());
			}
			
			private function onCreationCompletes():void
			{
				this.label = "Search /"+ valueToSearch +"/";
				worker.addEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming, false, 0, true);
				model.projects.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleProjectsChange);
				
				// @note
				// sending over a full-fledged typed 'projectFolder' (FileWrapper)
				// object having a huge file list (i.e. FlexJS project with its all js-bin folder/files)
				// to worker thread is very expensive. Sending as BytesArray also very expensive
				// in such cases when converting a big typed object to BytesArray.
				// thus sending the paths to the projects and parse the folders again at the
				// worker side is far more economic. We must remember that sending
				// objects over worker is copying all the bytes. It's better to balance
				// between convention and the output
				worker.sendProjectToSearchString(getSearchObject());
			}
			
			private function getSearchObject():Object
			{
				var tmpObj:Object = new Object();
				tmpObj.valueToSearch = valueToSearch;
				tmpObj.patterns = patterns;
				tmpObj.isMatchCase = isMatchCase;
				tmpObj.isRegexp = isRegexp;
				
				tmpObj.projects = getProjectPaths();
				
				return tmpObj;
			}
			
			private function getProjectPaths():Array
			{
				var tmpArr:Array = [];
				switch(scope)
				{
					case SearchPlugin.WORKSPACE:
					{
						for each (var i:AS3ProjectVO in model.projects)
						{
							tmpArr.push(i.folderLocation.fileBridge.nativePath);
						}
						break;
					}
					case SearchPlugin.LINKED_PROJECTS:
					{
						tmpArr.push(model.activeProject.folderLocation.fileBridge.nativePath);
						for each (var j:FileLocation in AS3ProjectVO(model.activeProject).classpaths)
						{
							if (AS3ProjectVO(model.activeProject).sourceFolder.fileBridge.nativePath != j.fileBridge.nativePath && j.fileBridge.nativePath.indexOf("{locale}") == -1)
							{
								tmpArr.push(j.fileBridge.nativePath);
							}
						}
						break;
					}	
					default:
					{
						tmpArr.push(model.activeProject.folderLocation.fileBridge.nativePath);
						break;
					}
				}
				
				return tmpArr;
			}
			
			private function onWorkerValueIncoming(event:GeneralEvent):void
			{
				switch (event.value.event)
				{
					case WorkerEvent.TOTAL_FILE_COUNT:
						pbFiles.setProgress(0, event.value.value);
						break;
					case WorkerEvent.FILE_PROCESSED_COUNT:
						pbFiles.setProgress(event.value.value, pbFiles.maximum);
						break;
					case WorkerEvent.FILTERED_FILE_COLLECTION:
						var tmpObj:Object = event.value.value;
						generateSearchTree(tmpObj);
						break;
					case WorkerEvent.TOTAL_FOUND_COUNT:
						var tmpArr:Array = event.value.value.split(":");
						foundCountsDict[tmpArr[0]] = tmpArr[1];
						break;
					case WorkerEvent.PROCESS_ENDS:
						updateLabel();
						break;
				}
			}
			
			private function updateLabel():void
			{
				txtFoundMessage.includeInLayout = txtFoundMessage.visible = true;
				
				var currentCount:int;
				var projectCount:int;
				for (var i:String in foundCountsDict)
				{
					currentCount += int(foundCountsDict[i]);
					projectCount++;
				}
				
				txtFoundMessage.text = "Found "+ currentCount +" matches across "+ projectCount +" project(s).";
				pbFiles.includeInLayout = pbFiles.visible = false;
			}
			
			private function generateSearchTree(value:Object):void
			{
				if (!tree.dataProvider || ArrayCollection(tree.dataProvider).length == 0) 
				{
					tree.dataProvider = value;
					// lets expand this for the first time only
					tree.callLater(function():void {	tree.expandItem(value, true);	});
				}
				else
				{
					ArrayCollection(tree.dataProvider).addItem(value);
				}
			}
			
			private function getTreeTooltip(item:Object):String 
			{
				if (!item.isRoot) return null;
				return item.file.nativePath;
			}
			
			private function onTreeItemClicked(event:MouseEvent):void
			{
				var tmpFL:FileLocation = new FileLocation(tree.selectedItem.file.nativePath);
				GlobalEventDispatcher.getInstance().dispatchEvent(
					new OpenFileEvent(OpenFileEvent.OPEN_FILE, tmpFL)
				);
			}
			
			private function getCountingLabel(item:Object):String
			{
				if (item.isRoot)  return item["name"]+"     ("+item.file.nativePath+")";
				if (!item.children) return item["name"]+" ("+item["searchCount"]+" matches)";
				return item["name"];
			}
			
			private function handleProjectsChange(event:CollectionEvent):void
			{
				switch (event.kind)
				{
					case 'remove':
					{
						var project:AS3ProjectVO = event.items[0] as AS3ProjectVO;
						for each (var i:Object in tree.dataProvider)
						{
							if (i.file.nativePath == project.folderLocation.fileBridge.nativePath)
							{
								ArrayCollection(tree.dataProvider).removeItem(i);
								delete foundCountsDict[i.file.nativePath];
								updateLabel();
								i = null;
								break;
							}
						}
					}
				}
			}
			
			protected function onTabRemoved(event:FlexEvent):void
			{
				worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
				model.projects.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleProjectsChange);
				
				// to-do - need tabView to dispatch this event against each closing tab
				// some components already dispatching this event manually while closing to 
				// owner classes - need to carefully remove them so no duplicate event dispatch occurs  
				dispatchEvent(new TabEvent(TabEvent.EVENT_TAB_CLOSE, null));
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup id="vgContent" 
			  paddingLeft="12" paddingTop="24" paddingBottom="24" paddingRight="12"
			  width="100%" height="100%">
		<s:VGroup width="100%" gap="4">
			<s:Label text="{'Searching for pattern /'+ valueToSearch +'/'}"
					 fontWeight="bold"/>
			<s:Label id="txtFoundMessage" 
					 height="{pbFiles.height}" verticalAlign="middle"
					 includeInLayout="false" visible="false"/>
			<mx:ProgressBar id="pbFiles" 
							mode="manual"
							width="100%" labelPlacement="right" labelWidth="0"
							barSkin="elements.skins.IDEProgressBarSkin"/>
		</s:VGroup>
		<mx:Tree
			id="tree"
			width="100%" height="100%"
			color="0xEEEEEE"
			contentBackgroundColor="0x0"
			rollOverColor="0x393939"
			selectionColor="0xc165b8"
			alternatingItemColors="[0x444444, 0x4d4c4c]"
			verticalScrollBarStyleName="black"
			borderVisible="false"
			rowHeight="18"
			useRollOver="true"
			doubleClickEnabled="true"
			showDataTips="true"
			itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"
			dataTipFunction="getTreeTooltip" labelFunction="getCountingLabel"
			doubleClick="onTreeItemClicked(event)"/>
	</s:VGroup>
</mx:Canvas>