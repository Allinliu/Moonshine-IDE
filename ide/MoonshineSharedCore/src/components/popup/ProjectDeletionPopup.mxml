<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
										   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:view="actionScripts.plugin.findreplace.view.*"
										   xmlns:utils="actionScripts.utils.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   backgroundColor="0xf5f5f5" width="500" minWidth="400" minHeight="400" title="New MXML Component"
										   creationComplete="onCreationCompletes(event)" skinClass="components.skins.ResizableTitleWindowSkin">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.events.DropDownEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.FileWrapper;
			
			import components.renderers.DividerRenderer;
			import components.renderers.FileTypeRenderer;

			[Bindable] public var wrapperBelongToProject:FileWrapper;
			
			[Bindable] private var filesBelongsToProject:FileWrapper;
	
			public var wrapperOfFolderLocation:FileWrapper;
			public var folderLocation:FileLocation;
	
			[Bindable]
			private var modifiedName:String = "";
			[Bindable]
			private var projectFolders:ArrayCollection;
			[Bindable]
			private var model:IDEModel = IDEModel.getInstance();
			[Bindable]
			private var warningMessage:String = "Class files allowed to create inside source folder only.";
	
			[Bindable]
			private var componentTemplates:ArrayCollection;
	
			private var lastSelectedItem:Object;
			private var projectSelectionWindow:NewFileProjectSelectionPopup;
			private var project:AS3ProjectVO;
			
			private var _isDestinationValid:Boolean;
	
			[Bindable]
			private function set isDestinationValid(value:Boolean):void
			{
				_isDestinationValid = value;
				if (!value) warningMessage = "Class files allowed to create inside source folder only.";
			}
	
			private function get isDestinationValid():Boolean
			{
				return _isDestinationValid;
			}
	
			override protected function closeByCrossSign(event:Event):void
			{
				doBeforeExit();
				super.closeByCrossSign(event);
			}
	
			override protected function onResizeKeyDownEvent(event:KeyboardEvent):void
			{
				doBeforeExit();
				super.onResizeKeyDownEvent(event);
			}
	
			protected function doBeforeExit():void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_ENABLE_STATE));
			}
	
			protected function onDeleteButton(event:MouseEvent):void
			{
			}
	
			private function getItemRenderer(item:*):IFactory
			{
				var renderer:Class = item is String ? DividerRenderer : FileTypeRenderer;
				return new ClassFactory(renderer);
			}
	
			protected function onDropDownClosed(event:DropDownEvent):void
			{
				if (event.target.selectedItem is String) event.target.selectedItem = lastSelectedItem;
			}
	
			protected function onCreationCompletes(event:FlexEvent):void
			{
				tree.callLater(parseFolders);
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
			}
	
			protected function parseFolders():void
			{
				project = UtilsCore.getProjectFromProjectFolder(wrapperBelongToProject) as AS3ProjectVO;
				
				// generate collection with files/folders those only
				// permitted to delete while project deletion call
				filesBelongsToProject = new FileWrapper(project.folderLocation, true, project.projectFolder.projectReference, false);
				filesBelongsToProject.children = [];
				
				var i:FileLocation;
				
				// class paths checks
				for each (i in project.classpaths)
				{
					if (isProjectRelativePath(i))
					{
						filesBelongsToProject.children.push(new FileWrapper(i, false, project.projectFolder.projectReference));
					}
				}
				
				// resource paths checks
				for each (i in project.resourcePaths)
				{
					if (isProjectRelativePath(i))
					{
						filesBelongsToProject.children.push(new FileWrapper(i, false, project.projectFolder.projectReference));
					}
				}
				
				// library paths checks
				for each (i in project.libraries)
				{
					if (isProjectRelativePath(i))
					{
						filesBelongsToProject.children.push(new FileWrapper(i, false, project.projectFolder.projectReference));
					}
				}
				
				tree.expandItem(filesBelongsToProject, true);
			}
	
			protected function onTreeItemClicked(event:ListEvent):void
			{
				// re-validate upon folder location change
				wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
			}
			
			private function isProjectRelativePath(value:FileLocation):Boolean
			{
				if (!value.fileBridge.isDirectory) value = value.fileBridge.parent;
				
				return (value.fileBridge.nativePath.indexOf(project.folderLocation.fileBridge.nativePath + project.folderLocation.fileBridge.separator) != -1);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" property="text"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  gap="10" paddingLeft="12" paddingBottom="9" paddingTop="9" paddingRight="13">
		<s:Label text="message:"/>
		<mx:Tree id="tree"
				 width="100%" height="100%"
				 dataProvider="{filesBelongsToProject}"
				 color="0xEEEEEE"
				 contentBackgroundColor="0x0"
				 rollOverColor="0x393939"
				 selectionColor="0xc165b8"
				 alternatingItemColors="[0x444444, 0x4d4c4c]"
				 verticalScrollBarStyleName="black"
				 borderVisible="false"
				 rowHeight="18"
				 useRollOver="true"
				 doubleClickEnabled="true"
				 labelField="name"
				 itemRenderer="actionScripts.ui.renderers.FTETreeItemRenderer"
				 itemClick="onTreeItemClicked(event)"/>
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<s:Button id="btnCreate" label="Delete"
				  styleName="darkButton"
				  click="onDeleteButton(event)"
				  enabled="false"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>