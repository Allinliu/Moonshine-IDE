<?xml version="1.0"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="21"
             alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[
        /**
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ButtonBarButton")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling" >
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array {return exclusions;}

        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }

        private var cornerRadius:Number = 4;

        /**
         *  @private
         *  The cornerRadius style is specified by the TabBar, not the button itself.
         *
         *  Rather than bind the corner radius properties of the s:Rect's in the markup
         *  below to hostComponent.owner.getStyle("cornerRadius"), we reset them here,
         *  each time a change in the value of the style is detected.  Note that each
         *  corner radius property is explicitly initialized to the default value of
         *  the style; the initial value of the private cornerRadius property.
         */
        private function updateCornerRadius():void
        {
            var cr:Number = getStyle("cornerRadius");
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
                fill.topLeftRadiusX = cornerRadius;
                fill.topRightRadiusX = cornerRadius;
            }
        }

        /**
         *  @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
        {
            updateCornerRadius();
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>

    <!--- layer 2: fill @private-->
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" topLeftRadiusX="4" topRightRadiusX="4" width="70" height="22">
        <s:fill>
            <s:SolidColor color="0x424242"
                          color.selectedStates="0x812137"/>
        </s:fill>
    </s:Rect>

    <!--- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 @private -->
    <s:Line id="borderBottom" left="0" right="0" bottom="0">
        <s:stroke>
            <s:SolidColorStroke weight="1"
                                color="0x000000"
                                color.selectedStates="0x812137"
                                alpha="0.75"
                                alpha.down="0.85"
                                alpha.selectedStates="0.5" />
        </s:stroke>
    </s:Line>

    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2" color="0xEEEEEE">
    </s:Label>

</s:SparkSkin>
